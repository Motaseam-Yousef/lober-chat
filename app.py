import streamlit as st
import openai
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Set the API key
api_key = os.getenv("OPENAI_API_KEY")
openai.api_key = api_key

# Load data from file
file_path = r'data/clean/ar.txt'
with open(file_path, 'r', encoding='utf-8') as file:
    data = file.readlines()

# Chatbot prompt setup
prompt = f"""
ุฃูุช ูุณุงุนุฏ ููุฏู ุฅุฌุงุจุงุช ุญูู ููุงููู ุงูุนูู ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ ุจูุงุกู ุนูู ุงูุจูุงูุงุช ุงูููุฏูุฉ ููุท. ูุฑุฌู ุงูุฅุฌุงุจุฉ ููุท ูู ุงููุนูููุงุช ุงููุนุทุงุฉ ูุจุงููุบุฉ ุงูุนุฑุจูุฉ.

---
{data}
---

ุนูุฏ ุทุฑุญ ุงููุณุชุฎุฏู ูุฃุณุฆูุฉุ ูุฑุฌู ุชูุฏูู ุฅุฌุงุจุฉ ุฏูููุฉ ููุฎุชุตุฑุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ุจุงุณุชุฎุฏุงู ุงููุนูููุงุช ุงููุชููุฑุฉ ููุท ูู ููุงููู ุงูุนูู ุงูููุฏูุฉ.
"""

MODEL = "gpt-4o"

# Define a function to respond as a customer service chatbot
def chatbot_response(user_input):
    response = openai.chat.completions.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": user_input}
        ]
    )
    return response.choices[0].message.content

# Streamlit app layout
st.set_page_config(page_title="ุดุงุช ุจูุช ููุณุงุนุฏุฉ ูู ูุงููู ุงูุนูู ุงูุณุนูุฏู", layout="centered", initial_sidebar_state="collapsed")

# Custom CSS for RTL styling and improved UI
st.markdown("""
    <style>
        .rtl {direction: rtl; text-align: right;}
        .stTextArea textarea {direction: rtl; text-align: right; font-size: 1.1em; background-color: #fdfdfd; padding: 10px; border-radius: 8px; border: 1px solid #ddd;}
        .stButton button {width: 100%; font-size: 1.2em; padding: 10px; background-color: #4CAF50; color: white; border: none; border-radius: 8px; cursor: pointer;}
        .stButton button:hover {background-color: #45a049;}
        .chat-container {background-color: #f9f9f9; padding: 15px; border-radius: 8px; border: 1px solid #ddd; margin-top: 10px;}
        .chat-response {background-color: #e8f5e9; padding: 15px; border-radius: 8px; font-size: 1.1em; margin-top: 10px;}
        .footer {text-align: center; font-size: 0.9em; color: #888; margin-top: 30px;}
    </style>
    """, unsafe_allow_html=True)

# Main Interface
st.markdown("<h1 style='text-align: right;'>๐ค ุดุงุช ุจูุช ูููุณุงุนุฏุฉ ูู ูุงููู ุงูุนูู ุงูุณุนูุฏู</h1>", unsafe_allow_html=True)
st.markdown('<div class="rtl">๐ผ ูุฑุญุจุงู ุจู! ููู ูููููู ูุณุงุนุฏุชูุ</div>', unsafe_allow_html=True)

# Recommended Questions
st.markdown("<h3 style='text-align: right;'>โ ุฃุณุฆูุฉ ููุชุฑุญุฉ:</h3>", unsafe_allow_html=True)
recommended_questions = [
    "ูุง ูู ุงูุดุฑูุท ุงูุฃุณุงุณูุฉ ุงูุชู ูุฌุจ ุฃู ูุชุถูููุง ุนูุฏ ุงูุนูู ููููุง ููุธุงู ุงูุนูู ุงูุณุนูุฏูุ",
    "ููู ูุชู ุชูุซูู ุนูุฏ ุงูุนูู ุฅููุชุฑููููุงุ ููุง ูู ุงููุงุฆุฏุฉ ูู ูุฐุง ุงูุชูุซููุ",
    "ูุง ูู ุญููู ุงูุนุงูู ุฃุซูุงุก ูุชุฑุฉ ุงูุชุฌุฑุจุฉุ ููู ูููู ุชูุฏูุฏูุงุ",
    "ูุง ูู ูุงุฌุจุงุช ุงูุนุงูู ุชุฌุงู ุตุงุญุจ ุงูุนููุ ููุง ุงูุฐู ูุฌุจ ุนููู ุงูุงูุชุฒุงู ุจูุ",
    "ูุง ูู ุฃููุงุน ุงูุฅุฌุงุฒุงุช ุงูุชู ูุญู ููุนุงูู ุงูุญุตูู ุนูููุง ููููุง ูููุธุงูุ",
    "ูุง ูู ุญููู ุงููุฑุฃุฉ ุงูุนุงููุฉ ุฎูุงู ูุชุฑุฉ ุงูุญูู ูุฅุฌุงุฒุฉ ุงููุถุนุ",
    "ููู ูุชู ุงุญุชุณุงุจ ุณุงุนุงุช ุงูุนููุ ููุง ูู ุงูุงุณุชุซูุงุกุงุช ุงููุทุจูุฉ ุฎูุงู ุดูุฑ ุฑูุถุงูุ",
    "ูุง ูู ุงูุฎุทูุงุช ุงูุชู ูุฌุจ ุงุชุจุงุนูุง ูุชูุฏูู ุดููู ุฃู ุชุธูู ูู ุญุงู ุญุฏูุซ ูุฒุงุน ุจูู ุงูุนุงูู ูุตุงุญุจ ุงูุนููุ",
    "ูุง ูู ุงูุญุงูุงุช ุงูุชู ูุญู ูููุง ููุนุงูู ุชุฑู ุงูุนูู ุฏูู ุฅุดุนุงุฑ ูุน ุงูุงุญุชูุงุธ ุจุญููููุ",
    "ููู ูุชู ุงูุชุนุงูู ูุน ุงูุฃุฌูุฑุ ููุง ูู ุงูุดุฑูุท ุงููุชุนููุฉ ุจุฏูุน ุงูุฑูุงุชุจ ูุงูุชุทุงุนุงุช ุงูุชุฃูููุงุช ุงูุงุฌุชูุงุนูุฉุ"
]

# Display recommended questions as clickable options
for question in recommended_questions:
    if st.button(question):
        st.session_state['user_input'] = question

# Chat Input
user_input = st.text_area("โ๏ธ ุงูุชุจ ุงุณุชูุณุงุฑู ููุง", key="user_input", max_chars=300, help="ุงูุชุจ ุงุณุชูุณุงุฑู ุญูู ูุงููู ุงูุนูู ุงูุณุนูุฏู ููุง")

# Submit button
if st.button('ุฅุฑุณุงู'):
    if user_input.strip() == "":
        st.warning("ุงูุฑุฌุงุก ูุชุงุจุฉ ุงุณุชูุณุงุฑ ูุจู ุงูุฅุฑุณุงู.")
    else:
        with st.spinner('ุฌุงุฑู ูุนุงูุฌุฉ ุงุณุชูุณุงุฑู...'):
            chatbot_reply = chatbot_response(user_input)
            
            # Display response
            st.markdown('<div class="rtl">โ ุชู ุงูุฑุฏ:</div>', unsafe_allow_html=True)
            st.markdown(f'<div class="rtl chat-response">{chatbot_reply}</div>', unsafe_allow_html=True)

# Footer
st.markdown(
    """
    <hr>
    <div class="footer">
        ุฌููุน ุงูุญููู ูุญููุธุฉ ยฉ 2024 ูุตุฉ ุชู.
    </div>
    """, unsafe_allow_html=True)
